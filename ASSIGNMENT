#include <iostream>                   //Keshav Sharma, Mechanical,SID:21107092
using namespace std;                 
//CREATING NODE CLASSS
class Node{
    public:
    //Creating class objects
    string name;
    int age;
    Node*next; //A node pointer for next node
    Node*prev; //A node pointer for previous node
    //calling constructor
    Node(string name,int age){
        this->name=name;
        this->age=age;
        next=NULL; //initialising next as NULL
        prev=NULL; //initialising prev as NULL
    }
};
//FUNCTION FOR INSERT DATA AT END OF LINKED LIST
void append(Node* &head,string name,int age){
    //creating a node pointer and storing address of head in temp
    Node*temp=head;
    //creating a new node and storing name and age in it
    Node*new_node=new Node(name,age);
    //inserting node in empty list
    if(temp==NULL){
        head=new_node;
    }
    //inserting node in non empty list
    else{
        while(temp->next!=NULL){temp=temp->next;}
        temp->next=new_node;
        new_node->prev=temp;
    }
}
//FUNCTION FOR INSERT DATA AT START OF LINKED LIST
void insert_at_head(Node*&head,string name,int age){
    //creating a Node pointer and storing address of new node in it 
    Node*new_node=new Node(name,age);
    //inserting new node at head
    new_node->next=head;
    head->prev=new_node;
    head=new_node;
}
//FUNCTION FOR DIPLAY DATA FROM START OF LINKED LIST
void display_from_start(Node*head){
    Node*temp=head;
    while(temp!=NULL){cout<<"[Name:"<<temp->name<<" Age:"<<temp->age<<"]"<<"<=>";temp=temp->next;}
    cout<<endl;
}
//FUNCTION FOR DISPLAY DATA FROM END OF LINKED LIST
void display_from_end(Node*head){
    Node*temp=head;
    while(temp->next!=NULL){temp=temp->next;}
    while(temp!=NULL){cout<<"[Name:"<<temp->name<<" Age:"<<temp->age<<"]"<<"<=>";temp=temp->prev;}
    cout<<endl;
}
//FUNCTION FOR DELETE ANY INDEX(0,n-1) EXCLUDING LAST ELEMENT 
void delete_ind(Node*&head,int i){
    if(i==0){
        Node*temp=head;
        head=temp->next;
        head->prev=NULL;
        delete temp;
    }
    else{
        Node*temp=head;
        for(int j=0;j<i;j++){temp=temp->next;}
        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;
        delete temp;
    }
}
//FUNCTION FOR DELETE LAST ELEMENT
void pop(Node*&head){
    Node*temp=head;
    while(temp->next!=NULL){temp=temp->next;}
    temp->prev->next=NULL;
    delete temp;
}
int main(){
    //initialising an empty linked list
    Node*head=NULL;
	int no_of_family_member;
    //taking no of family member as input
	cout<<"Enter Number Of Family Members:";cin>>no_of_family_member;
    //inserting family members details in doubly linked list
	for(int i=1;i<=no_of_family_member;i++){
		string name;
		int age;
		cout<<"Enter Family Members "<<i<<" Name:";cin>>name;
		cout<<"Enter Family Members "<<i<<" Name:";cin.ignore();getline(cin,name);
		cout<<"Enter Family Members "<<i<<" Age:";cin>>age;
        //appending data name and age in doubly linked list
		append(head,name,age);
	}
    cout<<endl;//for space
    //displaying family details
    cout<<"Doubly Linked list with my family members as elements is shown below:"<<endl;
    cout<<endl;
    display_from_start(head);
}
//Keshav Sharma, Mechanical, SID:21107092
/*BONUS QUESTION
Q.Try to find a way to link the family members' doubly-linked list based on their relationship.
Ans.One way to link a doubly linked list of family members is to sort the doubly linked list by age in descending order. This way we get a doubly linked list where the older generation people will be near the head in the doubly linked list and the new generation people will be at the end in the doubly linked list.
*/
